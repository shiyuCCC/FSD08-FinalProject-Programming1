Algorithm for methods

isAlphaNum()

1.Create method with the required input data type and output data type.
2.Check if the input is alphanumeric. Use ASCII values
3.Return true else return false

-------------------------------

isSpecialChar()

1.Create method with the required input data type and output data type.
2.Check if each character meets the requirement
2.Return true else return false

------------------------------------
isPrefixChar()

1.Create method with the required input data type and output data type.
2.Check if the input character is alphanumeric (using isAlphaNum()) or if it's special characters (using isSpecialChar())
3.Return true else return false

------------------------------------
isDomainChar()

1.Create method with the required input data type and output data type.
2.Check if the character is alphanumeric character(using isAlphaNum()) or if it's dash or period (using isSpecialChar() with the second value set as false.)
3.Return true else return false

-------------------------------------
singleAtSign()

1.Create method with the required input data type and output data type.
2.Initialize int count to record the appearance of '@'
3.Check every character in the string and +1 to int count if the character is '@'
4.Check if count == 1
5.Return true else return false.

--------------------------------------
fetchBeforeAt()

1.Create method with the required input data type and output data type.
2.Split the input string by '@' and fetch the part before '@' using .split()[] method
3.Return the value.

--------------------------------------- 
fetchBeforeAt()

1.Create method with the required input data type and output data type.
2.Split the input string by '@' and fetch the part after '@' using .split()[] method
3.Return the value.

----------------------------------------


isPrefix()

1. Create method with the required input data type and output data type.
2. Initialize an int variable as the length of the input string.
3. Check if string meets the requirements
     3.1 Check if the there is at least one character, if length<1 then boolean is false
     3.2 Check if the first character is alphanumeric by using existing method isAlphanumeric(), if not return false
     3.3 Loop every character to check if they are all prefix, if not return false
     If yes, 
        3.2.1 check if the underscore, period, or dash is the last character, if yes, return false
        3.2.2 check if the character behind underscore, period, or dash is alphanumeric, if not, return false.
4. Return the value
-------------------------------------

isDomain()

1. Create method with the required input data type and output data type.
2. Split the input string by '.' into an array called split with two substrings.
3. Initialize an int variable numSplit to store the numbers of the characters in the input string.
4. Check if the string length not equal to 2, if not return false.
5. Check the characters contained in the two portions meet the requirement.
   5.1 Initialize two string variables of the substrings of the splited array as firstPortion and secondPortion.
   5.2 Initialize two int variables of the length of the two portions.
   5.3 Loop each character to check
       5.3.1 Check if any of the characters of the firstPortion isn't a alphanumeric or period, dash, return false.
       5.3.2 Check if the character in the firstPortion is a dash, period or underscore.
          5.3.2.1 Check if it is the last character, if yes return false
          5.3.2.2 Check if the character behind it isn't a alphanumeric character, if not return false.
   5.4 Check if the length of the second portion < 2, if yes return false
   5.5 Check if the characters in the secondPortion are between a to z, if not return false.
6. Return the value.

---------------------------------------
isDomain-Xuerun
1.	Create method with the required input data type and output data type.
2.	Convert all characters to lower case
3.	Split the input string by '.' into an array called split with two substrings.
4.	Check if the string length not equal to 2
4.1.	Set the length of split array into an integer
4.2.	If the split array length is not 2, then number of periods is not 1, thus invalid domain and return false
4.3.	If the number of split portions is 2, continue 
5.	Check if the first portion contains at least one character
5.1.	Get the first portion from the split array
5.2.	Set the string length of first portion as an integer
5.3.	If the length is less than 1, return false and terminate 
5.4.	If equal or greater than 1, continue 
6.	Check if the first portion contains only alphanumeric characters, periods, and dashes
6.1.	Loop all characters in the first portion
6.2.	Check if the char is not a valid domain character
6.2.1.	 If yes, return false and terminate
6.2.2.	 If no, continue
6.3.	Check if the char is a special char
6.3.1.	If yes, check if the special char is the last char of domain
6.3.1.1.	If yes, return false and terminate
6.3.1.2.	If no, check if the next char after this special char is not an alphanumeric char
6.3.1.2.1.	If yes, return false and terminate
6.3.1.2.2.	If no, continue with the second portion
7.	Check if the second  portion contains at least two characters
7.1.	Get the second portion from the split array
7.2.	Set the string length of first portion as an integer
7.3.	If the length is less than 2, return false and terminate 
7.4.	If equal or greater than 2, continue 
8.	Check if the second portion contains only letters of the alphabet
8.1.	Loop all characters in the second portion
8.2.	Set the character as a char
8.3.	If the character is not an alphabet within ‘a’ to ‘z’, return false and terminate
8.4.	If the character is within ‘a’ to ‘z’, the second portion is valid
9.	If the code executes to here, the domain is valid and return true
----------------------------------------------------
Procedure isEmail
1.	Take an email address as a string input
2.	Check if the string contains only one '@' sign
2.1	If no, return false and terminate
2.2	If yes, continue
3.	Parse email string
3.1	Get string before '@' sign as prefix
3.2	Get string after '@' sign as domain
4.	Check the strings obtained in the above step
5. If string prefix is a valid prefix AND string domain is a valid domain, return true;
otherwise, return false
-----------------------------------------
Procedure isUsername
1.	Take an email address as a string input
2.	Check if the string contains seven or less characters
2.1	Set the length of string as an integer
2.2	If the length is larger than 7, return an empty string and terminate
2.3	If smaller than 7, continue
3.	Check if the first character is a period, or dash
3.1	If no, return an empty string and terminate 
3.2	If yes, continue
4.	Check if the string contains only alphanumeric character, periods, dashes, or an exclamation point
4.1	Loop through all characters
4.2	Set the character at an index location as a char
4.3	Check if char is not a domain char or an exclamation point
4.3.1	If yes, return an empty string and terminate
4.3.2	If no, continue
4.4 Check if char is an alphanumeric character
4.4.1	Set a false Boolean flag for alphanumeric
4.4.2	If the char is an alphanumeric character, the Boolean flag is true
4.4.3	If not, check if this char is a special char
4.4.3.1	If yes, check if this special char is the last char of username
4.4.3.1.1	If yes, return an empty string and terminate
4.4.3.1.2	If no, check if the next char after this special char is not an alphanumeric char
4.4.3.1.2.1	If yes, return an empty string and terminate
4.4.3.1.2.2	If no, continue
4.5	After finishing the loop, if the Boolean flag is false, return an empty string and terminate
4.6	If the string meets all the conditions listed above, return the username in lower case

------------------------------------------

isSafePassword()

1. Create method with the required input data type and output data type.
2. Initialize int variable to store the length of the input password
3. Initialize and set the boolean variables of uppercase,lowercase,number, special characters as false.
4. Initialize int variable countAN to count occurance of alphanumeric char.
5. Check if the length is between 7 and 15, if not return false.
6. Loop every character in the password string.
   6.1 Initialize char variable of each character.
   6.2 Check if the two same chars appear consecutively, if yes return false
   6.3 If the char is an alphanumeric character, + 1 to the count variable created in step 4
   6.4 If the char is an uppercase char, set boolean uppearcase to true.
   6.5 If the char is a lowercase char, set boolean lowercase to true.
   6.6 If the char is a number char, set boolean number to true.
   6.7 If the char is a special char, set boolean special characters to true.
 7. Check if the countAN <1, return false.
 8. Check if any of the booleans of of uppercase,lowercase,number, special characters is false, return false.
 9. Return the value.


-------------------------------------
safePassword-Xuerun
1.	Take the password from user as a string input
2.	Check if the password contains min 7 chars and max 15 chars
2.1	Set the length of the password as an integer
2.2	If the length is less than 7 or more than 15, return false and terminate
2.3	If the length is between 7 to 15, continue
3.	Check if the characters in the string meets the required conditions
3.1	Loop through all characters in the password
3.2	Set the character of password as char
3.3	Check if two characters appear consecutively
3.3.1	If the character is same as the next character, return false and terminate
3.3.2	If no, continue
3.4	Check if the string contains at least alphanumeric characters
3.4.1	Set the count occurrence of alphanumeric characters as an integer
3.4.2	If the character is an alphanumeric character, the count integer increase by 1
3.5	Check if the string contain at least one uppercase letter one lowercase letter, one number, and one period, dash or underscore.
3.5.1	Create four false Boolean flag for uppercase, lowercase, number and special characters
3.5.2	If the character is an uppercase character, uppercase flag is true
3.5.3	If the character is a lowercase character, lowercase flag is true
3.5.4	If the character is a number, number flag is true
3.5.5	If the character is a special character, special char flag is true
3.6	After finishing the loop, if the count occurrence of alphanumeric character is greater than 1, return false and terminate
3.7	If  all four Boolean flags are true, the password is valid, if not, return false and the password is invalid


   
